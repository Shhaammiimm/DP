     int n = sz(s) , m = sz(t) ;
    vector< vector< int >> dp( n+1 , vector<int>( m+1 , -1 )) ;
    for(int i = 0; i <= n ; i++ ) dp[i][0] = 0 ;
    for(int i = 0 ; i <= m ; i++ ) dp[0][i] = 0 ;
    for( int i = 1 ; i <= n ; i++ ){
        for(int j = 1 ; j <= m ; j++ ){
            if(s[i-1] == t[j-1]) dp[i][j] = 1 + dp[i-1][j-1] ;
            else dp[i][j] = max( dp[i-1][j] , dp[i][j-1] ) ;
        }
    }

    ---> ***LCS=dp[n][m]

    --->***Print LCS:
      int i = n , j = m ;
      string ans ;
      while( i > 0 && j > 0){
        if( s[i-1] == t[j-1] ){
            ans.pb(s[i-1]);
            i--;
            j--;
        }
        else if ( dp[i-1][j] > dp[i][j-1]){
            i--;
        }
        else{
            j--;
        }
       }
       reverse( all(ans) );
       cout<< ans <<nl;

    -->***Longest Common Substring:
       change in else: dp[i][j]=0 and calculate max of dp[i][j]

    -->***Longest Palindromic Subsequence of a string:
       make t=reverse(s) 

    -->***minimum insertion to make a string palindrome:
       calculate LPS ; ans=n-dp[n][m]

    --->***minimum inversion or deletion to convert string a to string b  
       ans=n+m-2*LCS(dp[n][m])

    --->***minimum length supersequence:
       s="coding",t="ninjas" then ans="codningjas"
       int i = n , j = m ;
       string ans="" ;
       while( i > 0 && j > 0){
        if( s[i-1] == t[j-1] ){
            ans+=s[i-1];
            i--;
            j--;
        }
        else if ( dp[i-1][j] > dp[i][j-1]){
           ans+=s[i-1];
		    i--;
        }
        else{
			ans+=t[j-1];
            j--;
        }
        }
        while(i>0)ans+=s[i-1],i--;
        while(j>0)ans+=t[j-1],j--;
        reverse(ans.begin(),ans.end());
	     return ans; 
        
   
